#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

class DashboardSetup {
    constructor() {
        this.rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });
        
        this.config = {};
    }

    async run() {
        console.log('üöÄ COSCA Semantic Insights Dashboard Setup');
        console.log('==========================================\n');

        try {
            await this.collectConfiguration();
            await this.createDirectories();
            await this.writeEnvironmentFile();
            await this.initializeDatabase();
            
            console.log('\n‚úÖ Setup completed successfully!');
            console.log('\nNext steps:');
            console.log('1. npm start (to start the dashboard)');
            console.log('2. Open http://localhost:3000 in your browser');
            console.log('3. Configure your VSCode extension to send telemetry');
            
        } catch (error) {
            console.error('\n‚ùå Setup failed:', error.message);
            process.exit(1);
        } finally {
            this.rl.close();
        }
    }

    async collectConfiguration() {
        console.log('üìù Configuration Setup\n');

        // PostHog configuration
        this.config.POSTHOG_API_KEY = await this.prompt('PostHog API Key: ');
        this.config.POSTHOG_HOST = await this.prompt('PostHog Host (default: https://app.posthog.com): ') || 'https://app.posthog.com';

        // OpenAI configuration
        this.config.OPENAI_API_KEY = await this.prompt('OpenAI API Key: ');

        // Server configuration
        this.config.PORT = await this.prompt('Server Port (default: 3000): ') || '3000';

        // Optional email configuration
        const setupEmail = await this.prompt('Setup email alerts? (y/n): ');
        if (setupEmail.toLowerCase() === 'y') {
            this.config.SMTP_HOST = await this.prompt('SMTP Host (e.g., smtp.gmail.com): ');
            this.config.SMTP_PORT = await this.prompt('SMTP Port (default: 587): ') || '587';
            this.config.SMTP_USER = await this.prompt('SMTP Username: ');
            this.config.SMTP_PASS = await this.prompt('SMTP Password: ');
            this.config.ALERT_EMAIL = await this.prompt('Alert recipient email: ');
        }

        // Optional Slack configuration
        const setupSlack = await this.prompt('Setup Slack alerts? (y/n): ');
        if (setupSlack.toLowerCase() === 'y') {
            this.config.SLACK_TOKEN = await this.prompt('Slack Bot Token: ');
            this.config.SLACK_CHANNEL = await this.prompt('Slack Channel (e.g., #alerts): ');
        }
    }

    async createDirectories() {
        console.log('\nüìÅ Creating directories...');
        
        const directories = [
            './data',
            './logs',
            './reports',
            './public'
        ];

        for (const dir of directories) {
            if (!fs.existsSync(dir)) {
                fs.mkdirSync(dir, { recursive: true });
                console.log(`  ‚úì Created ${dir}`);
            }
        }
    }

    async writeEnvironmentFile() {
        console.log('\n‚öôÔ∏è  Writing environment configuration...');
        
        const envContent = this.generateEnvContent();
        fs.writeFileSync('.env', envContent);
        console.log('  ‚úì Created .env file');
    }

    generateEnvContent() {
        const lines = [
            '# COSCA Semantic Insights Dashboard Configuration',
            '# Generated by setup script',
            '',
            '# Server Configuration',
            `PORT=${this.config.PORT}`,
            'NODE_ENV=production',
            '',
            '# PostHog Configuration',
            `POSTHOG_API_KEY=${this.config.POSTHOG_API_KEY}`,
            `POSTHOG_HOST=${this.config.POSTHOG_HOST}`,
            '',
            '# OpenAI Configuration',
            `OPENAI_API_KEY=${this.config.OPENAI_API_KEY}`,
            '',
            '# Database Configuration',
            'DATABASE_PATH=./data/insights.db',
            '',
            '# Security',
            `JWT_SECRET=${this.generateRandomString(32)}`,
            'API_RATE_LIMIT=100',
            '',
            '# Logging',
            'LOG_LEVEL=info',
            'LOG_FILE=./logs/dashboard.log',
            '',
            '# Alert Thresholds',
            'CRITICAL_SECURITY_THRESHOLD=1',
            'HIGH_PRIORITY_RECOMMENDATIONS_THRESHOLD=3',
            'TECHNICAL_DEBT_THRESHOLD=30',
            'PRODUCTIVITY_DROP_THRESHOLD=20',
            'ERROR_RATE_INCREASE_THRESHOLD=50'
        ];

        // Add email configuration if provided
        if (this.config.SMTP_HOST) {
            lines.push(
                '',
                '# Email Alerts Configuration',
                `SMTP_HOST=${this.config.SMTP_HOST}`,
                `SMTP_PORT=${this.config.SMTP_PORT}`,
                `SMTP_USER=${this.config.SMTP_USER}`,
                `SMTP_PASS=${this.config.SMTP_PASS}`,
                'SMTP_FROM=alerts@cosca.dev',
                `ALERT_EMAIL=${this.config.ALERT_EMAIL}`
            );
        }

        // Add Slack configuration if provided
        if (this.config.SLACK_TOKEN) {
            lines.push(
                '',
                '# Slack Alerts Configuration',
                `SLACK_TOKEN=${this.config.SLACK_TOKEN}`,
                `SLACK_CHANNEL=${this.config.SLACK_CHANNEL}`
            );
        }

        return lines.join('\n') + '\n';
    }

    async initializeDatabase() {
        console.log('\nüóÑÔ∏è  Initializing database...');
        
        const DatabaseService = require('./services/databaseService');
        const dbService = new DatabaseService();
        
        try {
            await dbService.initialize();
            console.log('  ‚úì Database initialized');
        } catch (error) {
            console.log('  ‚ö†Ô∏è  Database initialization will happen on first run');
        }
    }

    generateRandomString(length) {
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        let result = '';
        for (let i = 0; i < length; i++) {
            result += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return result;
    }

    prompt(question) {
        return new Promise((resolve) => {
            this.rl.question(question, (answer) => {
                resolve(answer.trim());
            });
        });
    }
}

// Run setup if called directly
if (require.main === module) {
    const setup = new DashboardSetup();
    setup.run().catch(console.error);
}

module.exports = DashboardSetup;